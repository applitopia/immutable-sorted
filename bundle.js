require=function n(s,a,t){function p(e,c){if(!a[e]){if(!s[e]){var i="function"==typeof require&&require;if(!c&&i)return i(e,!0);if(o)return o(e,!0);var l=new Error("Cannot find module '"+e+"'");throw l.code="MODULE_NOT_FOUND",l}var u=a[e]={exports:{}};s[e][0].call(u.exports,function(n){var a=s[e][1][n];return p(a?a:n)},u,u.exports,n,s,a,t)}return a[e].exports}for(var o="function"==typeof require&&require,e=0;e<t.length;e++)p(t[e]);return p}({1:[function(n,s,a){s.exports={name:"immutable-sorted",version:"0.2.8",description:"Immutable Sorted Data Collections",license:"MIT",homepage:"https://applitopia.github.io/immutable-sorted",repository:{type:"git",url:"git://github.com/applitopia/immutable-sorted.git"},bugs:{url:"https://github.com/applitopia/immutable-sorted/issues"},main:"dist/immutable.js",module:"dist/immutable.es.js",typings:"dist/immutable-nonambient.d.ts",typescript:{definition:"dist/immutable.d.ts"},scripts:{build:"run-s build:*","build:dist":"run-s clean:dist bundle:dist bundle:es copy:dist stats:dist","build:pages":"gulp --gulpfile ./resources/gulpfile.js default","stats:dist":"node ./resources/dist-stats.js","clean:dist":"rimraf dist","bundle:dist":"rollup -c ./resources/rollup-config.js","bundle:es":"rollup -c ./resources/rollup-config-es.js","copy:dist":"node ./resources/copy-dist-typedefs.js",lint:"run-s lint:*","lint:ts":'tslint "__tests__/**/*.ts"',"lint:js":'eslint "{__tests__,src,pages/src,pages/lib}/**/*.js"',format:'prettier --single-quote --trailing-comma=es5 --write "{__tests__,src,pages/src,pages/lib,perf,resources}/**/*{\\.js,\\.ts}"',testonly:"./resources/jest",test:"run-s format build lint testonly test:types:*","test:travis":"npm run test && ./resources/check-changes","test:types:ts":"tsc ./type-definitions/Immutable.d.ts --lib es2015 && dtslint type-definitions/ts-tests","test:types:flow":"flow check type-definitions/tests --include-warnings",perf:"node ./resources/bench.js",start:"gulp --gulpfile ./resources/gulpfile.js dev",deploy:"./resources/apia-deploy-ghpages.sh",gitpublish:"./resources/gitpublish.sh"},jest:{moduleFileExtensions:["js","ts"],transform:{"^.+\\.ts$":"<rootDir>/resources/jestPreprocessor.js"},testRegex:"/__tests__/.*\\.(ts|js)$",unmockedModulePathPatterns:["./node_modules/react"]},devDependencies:{benchmark:"2.1.4","browser-sync":"^2.26.3",browserify:"16.2.2",colors:"1.2.5",del:"3.0.0",dtslint:"0.1.2",eslint:"4.19.1","eslint-config-airbnb":"16.1.0","eslint-config-prettier":"2.9.0","eslint-plugin-import":"2.12.0","eslint-plugin-jsx-a11y":"6.0.3","eslint-plugin-prettier":"2.6.2","eslint-plugin-react":"7.8.2","flow-bin":"0.85.0",gulp:"3.9.1","gulp-concat":"2.6.1","gulp-filter":"5.1.0","gulp-header":"2.0.5","gulp-less":"3.5.0","gulp-size":"3.0.0","gulp-sourcemaps":"2.6.4","gulp-uglify":"2.1.0","gulp-util":"3.0.8","jasmine-check":"0.1.5",jest:"23.6.0",marked:"0.3.19",microtime:"2.1.8",mkdirp:"0.5.1","npm-run-all":"4.1.3",prettier:"1.14.2",react:"^0.12.0","react-router":"^0.11.2","react-tools":"0.13.3",rimraf:"2.6.2",rollup:"0.59.1","rollup-plugin-buble":"0.19.2","rollup-plugin-commonjs":"9.1.3","rollup-plugin-json":"3.0.0","rollup-plugin-strip-banner":"0.2.0","run-sequence":"2.2.1",through2:"2.0.3","transducers-js":"^0.4.174",tslint:"5.7.0",typescript:"3.0.3","uglify-js":"2.8.11","uglify-save-license":"0.4.1","vinyl-buffer":"1.0.1","vinyl-source-stream":"2.0.0"},files:["dist","contrib","README.md","LICENSE"],keywords:["immutable","sorted","sort","partial sort","incremental sort","Floyd-Rivest","persistent","lazy","data","datastructure","functional","collection","stateless","sequence","iteration"],dependencies:{}}},{}],2:[function(n,s,a){
s.exports='<h1 id="immutable-sorted-collections-for-javascript">Immutable Sorted Collections for JavaScript</h1>\n<p><a href="https://badge.fury.io/js/immutable-sorted"><img src="https://badge.fury.io/js/immutable-sorted.svg" alt="npm version"/></a>\n<a href="https://facebook.github.io/jest/"><img src="https://img.shields.io/badge/tested_with-jest-brightgreen.svg" alt="jest"/></a>\n<a href="https://david-dm.org/applitopia/immutable-sorted"><img src="https://img.shields.io/david/applitopia/immutable-sorted.svg" alt="dependencies"/></a>\n<a href="https://david-dm.org/applitopia/immutable-sorted?type=dev"><img src="https://img.shields.io/david/dev/applitopia/immutable-sorted.svg" alt="devDependencies"/></a>\n<a href="https://opensource.org/licenses/MIT"><img src="https://img.shields.io/badge/license-MIT-blue.svg" alt="License: MIT"/></a></p>\n<p>This package is an extension of popular collections library <a href="https://github.com/facebook/immutable-js">Immutable.js</a>. It provides additional immutable collections <a href="https://applitopia.github.io/immutable-sorted/docs/#/SortedMap">SortedMap</a> and <a href="https://applitopia.github.io/immutable-sorted/docs/#/SortedSet">SortedSet</a> that maintain their entries sorted by a comparator. The current implementation is using a classic <a href="https://en.wikipedia.org/wiki/B-tree">B-tree</a> memory structure.</p>\n<p>Additionally, this package provides <a href="https://en.wikipedia.org/wiki/Partial_sorting">partial sort</a> (returning the <code>n smallest elements</code>)\nand <a href="https://en.wikipedia.org/wiki/Selection_algorithm#Incremental_sorting_by_selection">incremental sort</a>\noperations implemented using <a href="https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm">Floyd-Rivest</a> variant of <a href="https://en.wikipedia.org/wiki/Selection_algorithm">selection algorithm</a>.</p>\n<h2 id="version">Version</h2>\n<p>The current version <a href="https://github.com/applitopia/immutable-sorted/releases/tag/v0.2.8">immutable-sorted@0.2.8</a> is an extension of <a href="https://github.com/facebook/immutable-js/releases/tag/v4.0.0-rc.12">immutable-js@4.0.0-rc.12</a>.</p>\n<h2 id="installation">Installation</h2>\n<code class="codeBlock">npm install immutable<span class="token operator" >-</span>sorted</code><h2 id="sortedset">SortedSet</h2>\n<p>See more details on <a href="https://applitopia.github.io/immutable-sorted/docs/#/SortedSet">SortedSet</a> page.</p>\n<p>SortedSet is a type of Set that keeps its values sorted by a comparator. The current implementation is using a classic B-Tree memory structure with O(N) space requirements and O(log N) get, add, and delete operations.</p>\n<p>Example:</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> <span class="token punctuation" >{</span> <span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >}</span> <span class="token operator" >=</span> <span class="token function" >require<span class="token punctuation" >(</span></span><span class="token string" >\'immutable-sorted\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> set1<span class="token operator" >=</span><span class="token function" >SortedSet<span class="token punctuation" >(</span></span><span class="token punctuation" >[</span><span class="token string" >\'orange\'</span><span class="token punctuation" >,</span> <span class="token string" >\'apple\'</span><span class="token punctuation" >,</span> <span class="token string" >\'banana\'</span><span class="token punctuation" >]</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span> <span class="token string" >"apple"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span><span class="token punctuation" >,</span> <span class="token string" >"orange"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> set2<span class="token operator" >=</span>set1<span class="token punctuation" >.</span><span class="token function" >add<span class="token punctuation" >(</span></span><span class="token string" >\'mango\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span> <span class="token string" >"apple"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span><span class="token punctuation" >,</span> <span class="token string" >"mango"</span><span class="token punctuation" >,</span> <span class="token string" >"orange"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> set3<span class="token operator" >=</span>set2<span class="token punctuation" >.</span><span class="token function" >delete<span class="token punctuation" >(</span></span><span class="token string" >\'banana\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span> <span class="token string" >"apple"</span><span class="token punctuation" >,</span> <span class="token string" >"mango"</span><span class="token punctuation" >,</span> <span class="token string" >"orange"</span> <span class="token punctuation" >}</span></code><p>Using a custom comparator:</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> reverseCmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token punctuation" >(</span>a<span class="token operator" >></span>b<span class="token operator" >?</span><span class="token operator" >-</span><span class="token number" >1</span><span class="token punctuation" >:</span>a<span class="token operator" >&lt;</span>b<span class="token operator" >?</span><span class="token number" >1</span><span class="token punctuation" >:</span><span class="token number" >0</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> set4<span class="token operator" >=</span><span class="token function" >SortedSet<span class="token punctuation" >(</span></span>set1<span class="token punctuation" >,</span> reverseCmp<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span> <span class="token string" >"orange"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span><span class="token punctuation" >,</span> <span class="token string" >"apple"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> set5<span class="token operator" >=</span>set4<span class="token punctuation" >.</span><span class="token function" >add<span class="token punctuation" >(</span></span><span class="token string" >\'mango\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span> <span class="token string" >"orange"</span><span class="token punctuation" >,</span> <span class="token string" >"mango"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span><span class="token punctuation" >,</span> <span class="token string" >"apple"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> set6<span class="token operator" >=</span>set5<span class="token punctuation" >.</span><span class="token function" >delete<span class="token punctuation" >(</span></span><span class="token string" >\'banana\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span> <span class="token string" >"orange"</span><span class="token punctuation" >,</span> <span class="token string" >"mango"</span><span class="token punctuation" >,</span> <span class="token string" >"apple"</span> <span class="token punctuation" >}</span></code><p>Set values, like Map keys, may be of any type. Equality is determined by comparator returning 0 value. In case of a custom comparator the equality may be redefined to have a different meaning than Immutable.is.</p>\n<p><strong>Searching SortedSet</strong></p>\n<p>Many real applications require ability to efficiently search in a sorted dataset. The method:</p>\n<code class="codeBlock"><span class="token function" >from<span class="token punctuation" >(</span></span>value<span class="token punctuation" >,</span> backwards<span class="token punctuation" >)</span></code><p>returns a sequence that represents a subset of a sorted set starting with value \nup to the last element in the set.</p>\n<p>If the optional parameter backwards is set to true, the returned sequence will\nlist the entries backwards, starting with value down to the first element in the set.</p>\n<p>Example:</p>\n<code class="codeBlock"><span class="token keyword" >const</span> <span class="token punctuation" >{</span> <span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >}</span> <span class="token operator" >=</span> <span class="token function" >require<span class="token punctuation" >(</span></span><span class="token string" >\'immutable-sorted\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> abc <span class="token operator" >=</span> <span class="token function" >SortedSet<span class="token punctuation" >(</span></span><span class="token punctuation" >[</span><span class="token string" >"A"</span><span class="token punctuation" >,</span> <span class="token string" >"B"</span><span class="token punctuation" >,</span> <span class="token string" >"C"</span><span class="token punctuation" >,</span> <span class="token string" >"D"</span><span class="token punctuation" >,</span> <span class="token string" >"E"</span><span class="token punctuation" >,</span> <span class="token string" >"F"</span><span class="token punctuation" >,</span> <span class="token string" >"G"</span><span class="token punctuation" >,</span> <span class="token string" >"H"</span><span class="token punctuation" >,</span> <span class="token string" >"I"</span><span class="token punctuation" >,</span> <span class="token string" >"J"</span><span class="token punctuation" >,</span> <span class="token string" >"K"</span><span class="token punctuation" >,</span> <span class="token string" >"L"</span><span class="token punctuation" >,</span> <span class="token string" >"M"</span><span class="token punctuation" >,</span> <span class="token string" >"N"</span><span class="token punctuation" >,</span> <span class="token string" >"O"</span><span class="token punctuation" >,</span> <span class="token string" >"P"</span><span class="token punctuation" >,</span> <span class="token string" >"Q"</span><span class="token punctuation" >,</span> <span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token string" >"S"</span><span class="token punctuation" >,</span> <span class="token string" >"T"</span><span class="token punctuation" >,</span> <span class="token string" >"U"</span><span class="token punctuation" >,</span> <span class="token string" >"V"</span><span class="token punctuation" >,</span> <span class="token string" >"W"</span><span class="token punctuation" >,</span> <span class="token string" >"X"</span><span class="token punctuation" >,</span> <span class="token string" >"Y"</span><span class="token punctuation" >,</span> <span class="token string" >"Z"</span><span class="token punctuation" >]</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token string" >"S"</span><span class="token punctuation" >,</span> <span class="token string" >"T"</span><span class="token punctuation" >,</span> <span class="token string" >"U"</span><span class="token punctuation" >,</span> <span class="token string" >"V"</span><span class="token punctuation" >,</span> <span class="token string" >"W"</span><span class="token punctuation" >,</span> <span class="token string" >"X"</span><span class="token punctuation" >,</span> <span class="token string" >"Y"</span><span class="token punctuation" >,</span> <span class="token string" >"Z"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token primitive" >true</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token string" >"Q"</span><span class="token punctuation" >,</span> <span class="token string" >"P"</span><span class="token punctuation" >,</span> <span class="token string" >"O"</span><span class="token punctuation" >,</span> <span class="token string" >"N"</span><span class="token punctuation" >,</span> <span class="token string" >"M"</span><span class="token punctuation" >,</span> <span class="token string" >"L"</span><span class="token punctuation" >,</span> <span class="token string" >"K"</span><span class="token punctuation" >,</span> <span class="token string" >"J"</span><span class="token punctuation" >,</span> <span class="token string" >"I"</span><span class="token punctuation" >,</span> <span class="token string" >"H"</span><span class="token punctuation" >,</span> <span class="token string" >"G"</span><span class="token punctuation" >,</span> <span class="token string" >"F"</span><span class="token punctuation" >,</span> <span class="token string" >"E"</span><span class="token punctuation" >,</span> <span class="token string" >"D"</span><span class="token punctuation" >,</span> <span class="token string" >"C"</span><span class="token punctuation" >,</span> <span class="token string" >"B"</span><span class="token punctuation" >,</span> <span class="token string" >"A"</span> <span class="token punctuation" >}</span></code><p>The method from() can be efficiently combined with take() to retrieve the desired number of values or with takeWhile() to retrieve a specific range:</p>\n<code class="codeBlock"><span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >take<span class="token punctuation" >(</span></span><span class="token number" >5</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token string" >"S"</span><span class="token punctuation" >,</span> <span class="token string" >"T"</span><span class="token punctuation" >,</span> <span class="token string" >"U"</span><span class="token punctuation" >,</span> <span class="token string" >"V"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >takeWhile<span class="token punctuation" >(</span></span>s <span class="token operator" >=</span><span class="token operator" >></span> s <span class="token operator" >&lt;</span> <span class="token string" >"W"</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token string" >"S"</span><span class="token punctuation" >,</span> <span class="token string" >"T"</span><span class="token punctuation" >,</span> <span class="token string" >"U"</span><span class="token punctuation" >,</span> <span class="token string" >"V"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token primitive" >true</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >take<span class="token punctuation" >(</span></span><span class="token number" >5</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token string" >"Q"</span><span class="token punctuation" >,</span> <span class="token string" >"P"</span><span class="token punctuation" >,</span> <span class="token string" >"O"</span><span class="token punctuation" >,</span> <span class="token string" >"N"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token primitive" >true</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >takeWhile<span class="token punctuation" >(</span></span>s <span class="token operator" >=</span><span class="token operator" >></span> s <span class="token operator" >></span> <span class="token string" >"K"</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token string" >"Q"</span><span class="token punctuation" >,</span> <span class="token string" >"P"</span><span class="token punctuation" >,</span> <span class="token string" >"O"</span><span class="token punctuation" >,</span> <span class="token string" >"N"</span><span class="token punctuation" >,</span> <span class="token string" >"M"</span><span class="token punctuation" >,</span> <span class="token string" >"L"</span> <span class="token punctuation" >}</span></code><p><strong>Working with objects</strong></p>\n<p>Many real use cases will be about storing the whole objects in SortedSet. That will usually be meaningful only when custom comparator is defined.</p>\n<p>Let&#39;s consider the following example with city objects:</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> <span class="token punctuation" >{</span> <span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span><span class="token punctuation" >,</span> <span class="token qualifier" >Seq</span><span class="token punctuation" >,</span> fromJS <span class="token punctuation" >}</span> <span class="token operator" >=</span> <span class="token function" >require<span class="token punctuation" >(</span></span><span class="token string" >\'immutable-sorted\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Have an array of city objects\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> cities<span class="token operator" >=</span><span class="token punctuation" >[</span>\n   <span class="token punctuation" >{</span>state<span class="token punctuation" >:</span> <span class="token string" >\'MA\'</span><span class="token punctuation" >,</span> city<span class="token punctuation" >:</span> <span class="token string" >\'Boston\'</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Miami\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'FL\'</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Seattle\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'WA\'</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Phoenix\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'AZ\'</span><span class="token punctuation" >}</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Make a seq that converts cities from JS into immutable objects\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> citiesSeq<span class="token operator" >=</span><span class="token function" >Seq<span class="token punctuation" >(</span></span>cities<span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >map<span class="token punctuation" >(</span></span><span class="token punctuation" >(</span>v<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >fromJS<span class="token punctuation" >(</span></span>v<span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Create a default SortedSet\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> set1<span class="token operator" >=</span><span class="token function" >SortedSet<span class="token punctuation" >(</span></span>citiesSeq<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span> <span class="token punctuation" >}</span></code><p>When relying on defaultComparator, like in example above, the objects get sorted by their string representations from toString() method. This is usually not what the application designers want. In our case it makes more sense to sort by the city name, than the whole string representation.</p>\n<p>Let&#39;s create a custom comparator:</p>\n<code class="codeBlock"><span class="token comment" spellcheck="true">// Define a general comparator\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> cmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token punctuation" >(</span>a<span class="token operator" >></span>b<span class="token operator" >?</span><span class="token number" >1</span><span class="token punctuation" >:</span><span class="token punctuation" >(</span>a<span class="token operator" >&lt;</span>b<span class="token operator" >?</span><span class="token operator" >-</span><span class="token number" >1</span><span class="token punctuation" >:</span><span class="token number" >0</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Define a comparator of city names\n</span><span class="token operator" >></span> <span class="token keyword" >let</span> citiesCmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Create a SortedSet with custom comparator\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> set2<span class="token operator" >=</span><span class="token function" >SortedSet<span class="token punctuation" >(</span></span>citiesSeq<span class="token punctuation" >,</span> citiesCmp<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span> <span class="token punctuation" >}</span></code><p>The custom comparator that we have created seems to work as expected. Now let&#39;s add into the collection another city of Phoenix, this time from state Illinois.</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> set3<span class="token operator" >=</span>set2<span class="token punctuation" >.</span><span class="token function" >add<span class="token punctuation" >(</span></span><span class="token function" >fromJS<span class="token punctuation" >(</span></span><span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Phoenix\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'IL\'</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"IL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span> <span class="token punctuation" >}</span></code><p>The Phoenix, AZ had been replaced with Phoenix, IL. This is because of the way the custom comparator is defined. It determines equality by comparing city names only, therefore Phoenix, AZ and Phoenix, IL are equal according to this comparator. Let&#39;s try to extend the comparator to compare the city name first and if they match then determine the result by comparing the state.</p>\n<code class="codeBlock"><span class="token comment" spellcheck="true">// Define more complex custom comparator\n</span><span class="token operator" >></span> citiesCmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token operator" >||</span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'state\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'state\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Create a new SortedSet with new custom comparator\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> set4<span class="token operator" >=</span><span class="token function" >SortedSet<span class="token punctuation" >(</span></span>set2<span class="token punctuation" >,</span> citiesCmp<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span> <span class="token punctuation" >}</span>\n\n<span class="token comment" spellcheck="true">// set4 looks the same as set2, now let\'s add the conflicting Phoenix, IL to set4\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> set5<span class="token operator" >=</span>set4<span class="token punctuation" >.</span><span class="token function" >add<span class="token punctuation" >(</span></span><span class="token function" >fromJS<span class="token punctuation" >(</span></span><span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Phoenix\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'IL\'</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"IL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span> <span class="token punctuation" >}</span></code><p>The custom comparator behaves as expected. Now let&#39;s swap the order of commands in the comparator and sort by state first and by city name second.</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> stateCitiesCmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'state\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'state\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token operator" >||</span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> set6<span class="token operator" >=</span><span class="token function" >SortedSet<span class="token punctuation" >(</span></span>set5<span class="token punctuation" >,</span> stateCitiesCmp<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Set</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"IL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span> <span class="token punctuation" >}</span></code><h2 id="sortedmap">SortedMap</h2>\n<p>See more details on <a href="https://applitopia.github.io/immutable-sorted/docs/#/SortedMap">SortedMap</a> page.</p>\n<p>SortedMap is a type of Map that keeps its entries (their keys) sorted by a comparator. The current implementation is using a classic B-Tree memory structure with O(N) space requirements and O(log N) get, set, and delete operations.</p>\n<p>Example:</p>\n<code class="codeBlock"><span class="token keyword" >const</span> <span class="token punctuation" >{</span> <span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >}</span> <span class="token operator" >=</span> <span class="token function" >require<span class="token punctuation" >(</span></span><span class="token string" >\'immutable-sorted\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> map1<span class="token operator" >=</span><span class="token function" >SortedMap<span class="token punctuation" >(</span></span><span class="token punctuation" >[</span><span class="token punctuation" >[</span><span class="token string" >\'orange\'</span><span class="token punctuation" >,</span><span class="token string" >\'orange\'</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >\'apple\'</span><span class="token punctuation" >,</span><span class="token string" >\'red\'</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >\'banana\'</span><span class="token punctuation" >,</span><span class="token string" >\'yellow\'</span><span class="token punctuation" >]</span><span class="token punctuation" >]</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"apple"</span><span class="token punctuation" >:</span> <span class="token string" >"red"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span><span class="token punctuation" >:</span> <span class="token string" >"yellow"</span><span class="token punctuation" >,</span> <span class="token string" >"orange"</span><span class="token punctuation" >:</span> <span class="token string" >"orange"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> map2<span class="token operator" >=</span>map1<span class="token punctuation" >.</span><span class="token function" >set<span class="token punctuation" >(</span></span><span class="token string" >\'mango\'</span><span class="token punctuation" >,</span> <span class="token string" >\'yellow/orange\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"apple"</span><span class="token punctuation" >:</span> <span class="token string" >"red"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span><span class="token punctuation" >:</span> <span class="token string" >"yellow"</span><span class="token punctuation" >,</span> <span class="token string" >"mango"</span><span class="token punctuation" >:</span> <span class="token string" >"yellow/orange"</span><span class="token punctuation" >,</span> <span class="token string" >"orange"</span><span class="token punctuation" >:</span> <span class="token string" >"orange"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> map3<span class="token operator" >=</span>map2<span class="token punctuation" >.</span><span class="token function" >delete<span class="token punctuation" >(</span></span><span class="token string" >\'banana\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"apple"</span><span class="token punctuation" >:</span> <span class="token string" >"red"</span><span class="token punctuation" >,</span> <span class="token string" >"mango"</span><span class="token punctuation" >:</span> <span class="token string" >"yellow/orange"</span><span class="token punctuation" >,</span> <span class="token string" >"orange"</span><span class="token punctuation" >:</span> <span class="token string" >"orange"</span> <span class="token punctuation" >}</span></code><p>Using a custom comparator:</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> reverseCmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token punctuation" >(</span>a<span class="token operator" >></span>b<span class="token operator" >?</span><span class="token operator" >-</span><span class="token number" >1</span><span class="token punctuation" >:</span><span class="token punctuation" >(</span>a<span class="token operator" >&lt;</span>b<span class="token operator" >?</span><span class="token number" >1</span><span class="token punctuation" >:</span><span class="token number" >0</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> map4<span class="token operator" >=</span><span class="token function" >SortedMap<span class="token punctuation" >(</span></span>map1<span class="token punctuation" >,</span> reverseCmp<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"orange"</span><span class="token punctuation" >:</span> <span class="token string" >"orange"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span><span class="token punctuation" >:</span> <span class="token string" >"yellow"</span><span class="token punctuation" >,</span> <span class="token string" >"apple"</span><span class="token punctuation" >:</span> <span class="token string" >"red"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> map5<span class="token operator" >=</span>map4<span class="token punctuation" >.</span><span class="token function" >set<span class="token punctuation" >(</span></span><span class="token string" >\'mango\'</span><span class="token punctuation" >,</span> <span class="token string" >\'yellow/orange\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"orange"</span><span class="token punctuation" >:</span> <span class="token string" >"orange"</span><span class="token punctuation" >,</span> <span class="token string" >"mango"</span><span class="token punctuation" >:</span> <span class="token string" >"yellow/orange"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span><span class="token punctuation" >:</span> <span class="token string" >"yellow"</span><span class="token punctuation" >,</span> <span class="token string" >"apple"</span><span class="token punctuation" >:</span> <span class="token string" >"red"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> map6<span class="token operator" >=</span>map5<span class="token punctuation" >.</span><span class="token function" >delete<span class="token punctuation" >(</span></span><span class="token string" >\'banana\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"orange"</span><span class="token punctuation" >:</span> <span class="token string" >"orange"</span><span class="token punctuation" >,</span> <span class="token string" >"mango"</span><span class="token punctuation" >:</span> <span class="token string" >"yellow/orange"</span><span class="token punctuation" >,</span> <span class="token string" >"apple"</span><span class="token punctuation" >:</span> <span class="token string" >"red"</span> <span class="token punctuation" >}</span></code><p>When iterating a SortedMap, the order of entries is guaranteed to be the same as the sorted order of keys determined by a comparator.</p>\n<p>Map keys and values may be of any type. Equality of keys is determined by comparator returning 0 value. In case of a custom comparator the equality may be redefined to have a different meaning than Immutable.is.</p>\n<p><strong>Searching SortedMap</strong></p>\n<p>Many real applications require ability to efficiently search in a sorted data structure. The method:</p>\n<code class="codeBlock"><span class="token function" >from<span class="token punctuation" >(</span></span>key<span class="token punctuation" >,</span> backwards<span class="token punctuation" >)</span></code><p>returns a sequence that represents a portion of this sorted map starting with a specific key up to the last entry in the sorted  map.</p>\n<p>If the optional parameter backwards is set to true, the returned sequence will list the entries backwards, starting with key down to the first entry in the sorted map.</p>\n<p>Example:</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> abc <span class="token operator" >=</span> <span class="token function" >SortedMap<span class="token punctuation" >(</span></span><span class="token punctuation" >[</span><span class="token punctuation" >[</span><span class="token string" >"A"</span><span class="token punctuation" >,</span> <span class="token string" >"a"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"B"</span><span class="token punctuation" >,</span> <span class="token string" >"b"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"C"</span><span class="token punctuation" >,</span> <span class="token string" >"c"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"D"</span><span class="token punctuation" >,</span> <span class="token string" >"d"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"E"</span><span class="token punctuation" >,</span> <span class="token string" >"e"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"F"</span><span class="token punctuation" >,</span> <span class="token string" >"f"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"G"</span><span class="token punctuation" >,</span> <span class="token string" >"g"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"H"</span><span class="token punctuation" >,</span> <span class="token string" >"h"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"I"</span><span class="token punctuation" >,</span> <span class="token string" >"i"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"J"</span><span class="token punctuation" >,</span> <span class="token string" >"j"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"K"</span><span class="token punctuation" >,</span> <span class="token string" >"k"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"L"</span><span class="token punctuation" >,</span> <span class="token string" >"l"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"M"</span><span class="token punctuation" >,</span> <span class="token string" >"m"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"N"</span><span class="token punctuation" >,</span> <span class="token string" >"n"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"O"</span><span class="token punctuation" >,</span> <span class="token string" >"o"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"P"</span><span class="token punctuation" >,</span> <span class="token string" >"p"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"Q"</span><span class="token punctuation" >,</span> <span class="token string" >"q"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token string" >"r"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"S"</span><span class="token punctuation" >,</span> <span class="token string" >"s"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"T"</span><span class="token punctuation" >,</span> <span class="token string" >"t"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"U"</span><span class="token punctuation" >,</span> <span class="token string" >"u"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"V"</span><span class="token punctuation" >,</span> <span class="token string" >"v"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"W"</span><span class="token punctuation" >,</span> <span class="token string" >"w"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"X"</span><span class="token punctuation" >,</span> <span class="token string" >"x"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"Y"</span><span class="token punctuation" >,</span> <span class="token string" >"y"</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >"Z"</span><span class="token punctuation" >,</span> <span class="token string" >"z"</span><span class="token punctuation" >]</span><span class="token punctuation" >]</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >:</span> <span class="token string" >"r"</span><span class="token punctuation" >,</span> <span class="token string" >"S"</span><span class="token punctuation" >:</span> <span class="token string" >"s"</span><span class="token punctuation" >,</span> <span class="token string" >"T"</span><span class="token punctuation" >:</span> <span class="token string" >"t"</span><span class="token punctuation" >,</span> <span class="token string" >"U"</span><span class="token punctuation" >:</span> <span class="token string" >"u"</span><span class="token punctuation" >,</span> <span class="token string" >"V"</span><span class="token punctuation" >:</span> <span class="token string" >"v"</span><span class="token punctuation" >,</span> <span class="token string" >"W"</span><span class="token punctuation" >:</span> <span class="token string" >"w"</span><span class="token punctuation" >,</span> <span class="token string" >"X"</span><span class="token punctuation" >:</span> <span class="token string" >"x"</span><span class="token punctuation" >,</span> <span class="token string" >"Y"</span><span class="token punctuation" >:</span> <span class="token string" >"y"</span><span class="token punctuation" >,</span> <span class="token string" >"Z"</span><span class="token punctuation" >:</span> <span class="token string" >"z"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token primitive" >true</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >:</span> <span class="token string" >"r"</span><span class="token punctuation" >,</span> <span class="token string" >"Q"</span><span class="token punctuation" >:</span> <span class="token string" >"q"</span><span class="token punctuation" >,</span> <span class="token string" >"P"</span><span class="token punctuation" >:</span> <span class="token string" >"p"</span><span class="token punctuation" >,</span> <span class="token string" >"O"</span><span class="token punctuation" >:</span> <span class="token string" >"o"</span><span class="token punctuation" >,</span> <span class="token string" >"N"</span><span class="token punctuation" >:</span> <span class="token string" >"n"</span><span class="token punctuation" >,</span> <span class="token string" >"M"</span><span class="token punctuation" >:</span> <span class="token string" >"m"</span><span class="token punctuation" >,</span> <span class="token string" >"L"</span><span class="token punctuation" >:</span> <span class="token string" >"l"</span><span class="token punctuation" >,</span> <span class="token string" >"K"</span><span class="token punctuation" >:</span> <span class="token string" >"k"</span><span class="token punctuation" >,</span> <span class="token string" >"J"</span><span class="token punctuation" >:</span> <span class="token string" >"j"</span><span class="token punctuation" >,</span> <span class="token string" >"I"</span><span class="token punctuation" >:</span> <span class="token string" >"i"</span><span class="token punctuation" >,</span> <span class="token string" >"H"</span><span class="token punctuation" >:</span> <span class="token string" >"h"</span><span class="token punctuation" >,</span> <span class="token string" >"G"</span><span class="token punctuation" >:</span> <span class="token string" >"g"</span><span class="token punctuation" >,</span> <span class="token string" >"F"</span><span class="token punctuation" >:</span> <span class="token string" >"f"</span><span class="token punctuation" >,</span> <span class="token string" >"E"</span><span class="token punctuation" >:</span> <span class="token string" >"e"</span><span class="token punctuation" >,</span> <span class="token string" >"D"</span><span class="token punctuation" >:</span> <span class="token string" >"d"</span><span class="token punctuation" >,</span> <span class="token string" >"C"</span><span class="token punctuation" >:</span> <span class="token string" >"c"</span><span class="token punctuation" >,</span> <span class="token string" >"B"</span><span class="token punctuation" >:</span> <span class="token string" >"b"</span><span class="token punctuation" >,</span> <span class="token string" >"A"</span><span class="token punctuation" >:</span> <span class="token string" >"a"</span> <span class="token punctuation" >}</span></code><p>The method from() can be efficiently combined with take() to retrieve the desired number of values or with takeWhile() to retrieve a specific range:</p>\n<code class="codeBlock"><span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >take<span class="token punctuation" >(</span></span><span class="token number" >5</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >:</span> <span class="token string" >"r"</span><span class="token punctuation" >,</span> <span class="token string" >"S"</span><span class="token punctuation" >:</span> <span class="token string" >"s"</span><span class="token punctuation" >,</span> <span class="token string" >"T"</span><span class="token punctuation" >:</span> <span class="token string" >"t"</span><span class="token punctuation" >,</span> <span class="token string" >"U"</span><span class="token punctuation" >:</span> <span class="token string" >"u"</span><span class="token punctuation" >,</span> <span class="token string" >"V"</span><span class="token punctuation" >:</span> <span class="token string" >"v"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >takeWhile<span class="token punctuation" >(</span></span><span class="token punctuation" >(</span>v<span class="token punctuation" >,</span> k<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> k <span class="token operator" >&lt;</span> <span class="token string" >"W"</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >:</span> <span class="token string" >"r"</span><span class="token punctuation" >,</span> <span class="token string" >"S"</span><span class="token punctuation" >:</span> <span class="token string" >"s"</span><span class="token punctuation" >,</span> <span class="token string" >"T"</span><span class="token punctuation" >:</span> <span class="token string" >"t"</span><span class="token punctuation" >,</span> <span class="token string" >"U"</span><span class="token punctuation" >:</span> <span class="token string" >"u"</span><span class="token punctuation" >,</span> <span class="token string" >"V"</span><span class="token punctuation" >:</span> <span class="token string" >"v"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token primitive" >true</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >take<span class="token punctuation" >(</span></span><span class="token number" >5</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >:</span> <span class="token string" >"r"</span><span class="token punctuation" >,</span> <span class="token string" >"Q"</span><span class="token punctuation" >:</span> <span class="token string" >"q"</span><span class="token punctuation" >,</span> <span class="token string" >"P"</span><span class="token punctuation" >:</span> <span class="token string" >"p"</span><span class="token punctuation" >,</span> <span class="token string" >"O"</span><span class="token punctuation" >:</span> <span class="token string" >"o"</span><span class="token punctuation" >,</span> <span class="token string" >"N"</span><span class="token punctuation" >:</span> <span class="token string" >"n"</span> <span class="token punctuation" >}</span>\n\n<span class="token operator" >></span> abc<span class="token punctuation" >.</span><span class="token function" >from<span class="token punctuation" >(</span></span><span class="token string" >"R"</span><span class="token punctuation" >,</span> <span class="token primitive" >true</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >takeWhile<span class="token punctuation" >(</span></span><span class="token punctuation" >(</span>v<span class="token punctuation" >,</span> k<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> k <span class="token operator" >></span> <span class="token string" >"K"</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span> <span class="token string" >"R"</span><span class="token punctuation" >:</span> <span class="token string" >"r"</span><span class="token punctuation" >,</span> <span class="token string" >"Q"</span><span class="token punctuation" >:</span> <span class="token string" >"q"</span><span class="token punctuation" >,</span> <span class="token string" >"P"</span><span class="token punctuation" >:</span> <span class="token string" >"p"</span><span class="token punctuation" >,</span> <span class="token string" >"O"</span><span class="token punctuation" >:</span> <span class="token string" >"o"</span><span class="token punctuation" >,</span> <span class="token string" >"N"</span><span class="token punctuation" >:</span> <span class="token string" >"n"</span><span class="token punctuation" >,</span> <span class="token string" >"M"</span><span class="token punctuation" >:</span> <span class="token string" >"m"</span><span class="token punctuation" >,</span> <span class="token string" >"L"</span><span class="token punctuation" >:</span> <span class="token string" >"l"</span> <span class="token punctuation" >}</span></code><p><strong>Working with objects</strong></p>\n<p>Many real use cases will be about storing the whole objects in SortedMap. That will usually be meaningful only when custom comparator is defined.</p>\n<p>Let&#39;s consider the following example with city objects as keys and their co-ordinates as values:</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> <span class="token punctuation" >{</span> <span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span><span class="token punctuation" >,</span> <span class="token qualifier" >Seq</span><span class="token punctuation" >,</span> fromJS <span class="token punctuation" >}</span> <span class="token operator" >=</span> <span class="token function" >require<span class="token punctuation" >(</span></span><span class="token string" >\'immutable-sorted\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Have an array of city objects\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> cities<span class="token operator" >=</span><span class="token punctuation" >[</span>\n   <span class="token punctuation" >[</span><span class="token punctuation" >{</span>state<span class="token punctuation" >:</span> <span class="token string" >\'MA\'</span><span class="token punctuation" >,</span> city<span class="token punctuation" >:</span> <span class="token string" >\'Boston\'</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span> <span class="token punctuation" >[</span><span class="token string" >\'42°21′N\'</span><span class="token punctuation" >,</span><span class="token string" >\'71°04′W\'</span><span class="token punctuation" >]</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token punctuation" >[</span><span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Miami\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'FL\'</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span><span class="token punctuation" >[</span><span class="token string" >\'25°47′N\'</span><span class="token punctuation" >,</span><span class="token string" >\'80°13′W\'</span><span class="token punctuation" >]</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token punctuation" >[</span><span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Seattle\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'WA\'</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span><span class="token punctuation" >[</span><span class="token string" >\'47°37′N\'</span><span class="token punctuation" >,</span><span class="token string" >\'122°20′W\'</span><span class="token punctuation" >]</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token punctuation" >[</span><span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Phoenix\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'AZ\'</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span><span class="token punctuation" >[</span><span class="token string" >\'33°27′N\'</span><span class="token punctuation" >,</span><span class="token string" >\'112°04′W\'</span><span class="token punctuation" >]</span><span class="token punctuation" >]</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Make a seq that converts cities and their co-ordinates from JS into immutable objects\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> citiesSeq<span class="token operator" >=</span><span class="token qualifier" >Seq</span><span class="token punctuation" >.</span><span class="token function" >Keyed<span class="token punctuation" >(</span></span>cities<span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >mapKeys<span class="token punctuation" >(</span></span><span class="token punctuation" >(</span>v<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >fromJS<span class="token punctuation" >(</span></span>v<span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >map<span class="token punctuation" >(</span></span><span class="token punctuation" >(</span>v<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >fromJS<span class="token punctuation" >(</span></span>v<span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"42°21′N"</span><span class="token punctuation" >,</span> <span class="token string" >"71°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"25°47′N"</span><span class="token punctuation" >,</span> <span class="token string" >"80°13′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"47°37′N"</span><span class="token punctuation" >,</span> <span class="token string" >"122°20′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"33°27′N"</span><span class="token punctuation" >,</span> <span class="token string" >"112°04′W"</span> <span class="token punctuation" >]</span> <span class="token punctuation" >}</span>\n\n<span class="token comment" spellcheck="true">// Create a default SortedMap\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> map1<span class="token operator" >=</span><span class="token function" >SortedMap<span class="token punctuation" >(</span></span>citiesSeq<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"25°47′N"</span><span class="token punctuation" >,</span> <span class="token string" >"80°13′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"33°27′N"</span><span class="token punctuation" >,</span> <span class="token string" >"112°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"47°37′N"</span><span class="token punctuation" >,</span> <span class="token string" >"122°20′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"42°21′N"</span><span class="token punctuation" >,</span> <span class="token string" >"71°04′W"</span> <span class="token punctuation" >]</span> <span class="token punctuation" >}</span></code><p>When relying on defaultComparator, like in example above, the objects get sorted by their string representations from toString() method. This is usually not what the application designers want. In our case it makes more sense to sort by the city name, than the whole string representation.</p>\n<p>Let&#39;s create a custom comparator:</p>\n<code class="codeBlock"><span class="token comment" spellcheck="true">// Define a general simple comparator\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> cmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token punctuation" >(</span>a<span class="token operator" >></span>b<span class="token operator" >?</span><span class="token number" >1</span><span class="token punctuation" >:</span><span class="token punctuation" >(</span>a<span class="token operator" >&lt;</span>b<span class="token operator" >?</span><span class="token operator" >-</span><span class="token number" >1</span><span class="token punctuation" >:</span><span class="token number" >0</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Define a comparator of city names\n</span><span class="token operator" >></span> <span class="token keyword" >let</span> citiesCmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Create a SortedSet with custom comparator\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> map2<span class="token operator" >=</span><span class="token function" >SortedMap<span class="token punctuation" >(</span></span>citiesSeq<span class="token punctuation" >,</span> citiesCmp<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"42°21′N"</span><span class="token punctuation" >,</span> <span class="token string" >"71°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"25°47′N"</span><span class="token punctuation" >,</span> <span class="token string" >"80°13′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"33°27′N"</span><span class="token punctuation" >,</span> <span class="token string" >"112°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"47°37′N"</span><span class="token punctuation" >,</span> <span class="token string" >"122°20′W"</span> <span class="token punctuation" >]</span> <span class="token punctuation" >}</span></code><p>The custom comparator that we have created seems to work as expected. Now let&#39;s add into the collection another city of Phoenix, this time from state Illinois.</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> map3<span class="token operator" >=</span>map2<span class="token punctuation" >.</span><span class="token function" >set<span class="token punctuation" >(</span></span><span class="token function" >fromJS<span class="token punctuation" >(</span></span><span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Phoenix\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'IL\'</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> <span class="token function" >fromJS<span class="token punctuation" >(</span></span><span class="token punctuation" >[</span><span class="token string" >\'41°36′N\'</span><span class="token punctuation" >,</span><span class="token string" >\'87°37′W\'</span><span class="token punctuation" >]</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"42°21′N"</span><span class="token punctuation" >,</span> <span class="token string" >"71°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"25°47′N"</span><span class="token punctuation" >,</span> <span class="token string" >"80°13′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"IL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"41°36′N"</span><span class="token punctuation" >,</span> <span class="token string" >"87°37′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"47°37′N"</span><span class="token punctuation" >,</span> <span class="token string" >"122°20′W"</span> <span class="token punctuation" >]</span> <span class="token punctuation" >}</span></code><p>The Phoenix, AZ had been replaced with Phoenix, IL. This is because of the way the custom comparator is defined. It determines equality by comparing city names only, therefore Phoenix, AZ and Phoenix, IL are equal according to this comparator. Let&#39;s try to extend the comparator to compare the city name first and if they match then determine the result by comparing the state.</p>\n<code class="codeBlock"><span class="token comment" spellcheck="true">// Define more complex custom comparator\n</span><span class="token operator" >></span> citiesCmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token operator" >||</span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'state\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'state\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token comment" spellcheck="true">// Create a new SortedMap with new custom comparator\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> map4<span class="token operator" >=</span><span class="token function" >SortedMap<span class="token punctuation" >(</span></span>map2<span class="token punctuation" >,</span> citiesCmp<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"42°21′N"</span><span class="token punctuation" >,</span> <span class="token string" >"71°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"25°47′N"</span><span class="token punctuation" >,</span> <span class="token string" >"80°13′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"33°27′N"</span><span class="token punctuation" >,</span> <span class="token string" >"112°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"47°37′N"</span><span class="token punctuation" >,</span> <span class="token string" >"122°20′W"</span> <span class="token punctuation" >]</span> <span class="token punctuation" >}</span>\n\n<span class="token comment" spellcheck="true">// map4 looks the same as map2, now let\'s add the conflicting Phoenix, IL to map4\n</span><span class="token operator" >></span> <span class="token keyword" >const</span> map5<span class="token operator" >=</span>map4<span class="token punctuation" >.</span><span class="token function" >set<span class="token punctuation" >(</span></span><span class="token function" >fromJS<span class="token punctuation" >(</span></span><span class="token punctuation" >{</span>city<span class="token punctuation" >:</span> <span class="token string" >\'Phoenix\'</span><span class="token punctuation" >,</span> state<span class="token punctuation" >:</span> <span class="token string" >\'IL\'</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> <span class="token function" >fromJS<span class="token punctuation" >(</span></span><span class="token punctuation" >[</span><span class="token string" >\'41°36′N\'</span><span class="token punctuation" >,</span><span class="token string" >\'87°37′W\'</span><span class="token punctuation" >]</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"42°21′N"</span><span class="token punctuation" >,</span> <span class="token string" >"71°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"25°47′N"</span><span class="token punctuation" >,</span> <span class="token string" >"80°13′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"33°27′N"</span><span class="token punctuation" >,</span> <span class="token string" >"112°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"IL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"41°36′N"</span><span class="token punctuation" >,</span> <span class="token string" >"87°37′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"47°37′N"</span><span class="token punctuation" >,</span> <span class="token string" >"122°20′W"</span> <span class="token punctuation" >]</span> <span class="token punctuation" >}</span></code><p>The custom comparator behaves as expected. Now let&#39;s swap the order of commands in the comparator and sort by state first and by city name second.</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> stateCitiesCmp<span class="token operator" >=</span><span class="token punctuation" >(</span>a<span class="token punctuation" >,</span>b<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token operator" >></span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'state\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'state\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token operator" >||</span><span class="token function" >cmp<span class="token punctuation" >(</span></span>a<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span> b<span class="token punctuation" >.</span><span class="token function" >get<span class="token punctuation" >(</span></span><span class="token string" >\'city\'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> map6<span class="token operator" >=</span><span class="token function" >SortedMap<span class="token punctuation" >(</span></span>map5<span class="token punctuation" >,</span> stateCitiesCmp<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token qualifier" >Sorted</span><span class="token qualifier" >Map</span> <span class="token punctuation" >{</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"AZ"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"33°27′N"</span><span class="token punctuation" >,</span> <span class="token string" >"112°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Miami"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"FL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"25°47′N"</span><span class="token punctuation" >,</span> <span class="token string" >"80°13′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Phoenix"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"IL"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"41°36′N"</span><span class="token punctuation" >,</span> <span class="token string" >"87°37′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"MA"</span><span class="token punctuation" >,</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Boston"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"42°21′N"</span><span class="token punctuation" >,</span> <span class="token string" >"71°04′W"</span> <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n   <span class="token qualifier" >Map</span> <span class="token punctuation" >{</span> <span class="token string" >"city"</span><span class="token punctuation" >:</span> <span class="token string" >"Seattle"</span><span class="token punctuation" >,</span> <span class="token string" >"state"</span><span class="token punctuation" >:</span> <span class="token string" >"WA"</span> <span class="token punctuation" >}</span><span class="token punctuation" >:</span> <span class="token qualifier" >List</span> <span class="token punctuation" >[</span> <span class="token string" >"47°37′N"</span><span class="token punctuation" >,</span> <span class="token string" >"122°20′W"</span> <span class="token punctuation" >]</span> <span class="token punctuation" >}</span></code><h2 id="partial-sort">Partial sort</h2>\n<p>Any collection (including sequences) provides partialSort() and partialSortBy()\nfunctions for efficiently finding and sorting the <code>n smallest elements</code> in a collection using\nFloyd-Rivest select algorithm.</p>\n<p>Example:</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> <span class="token punctuation" >{</span> <span class="token qualifier" >Seq</span> <span class="token punctuation" >}</span> <span class="token operator" >=</span> <span class="token function" >require<span class="token punctuation" >(</span></span><span class="token string" >\'immutable-sorted\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> seq1<span class="token operator" >=</span><span class="token function" >Seq<span class="token punctuation" >(</span></span><span class="token punctuation" >[</span><span class="token string" >\'orange\'</span><span class="token punctuation" >,</span> <span class="token string" >\'apple\'</span><span class="token punctuation" >,</span> <span class="token string" >\'banana\'</span><span class="token punctuation" >]</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token operator" >></span> seq1<span class="token punctuation" >.</span><span class="token function" >partialSort<span class="token punctuation" >(</span></span><span class="token number" >2</span><span class="token punctuation" >)</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >[</span> <span class="token string" >"apple"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span> <span class="token punctuation" >]</span></code><h2 id="incremental-sort">Incremental sort</h2>\n<p>Any collection (including sequences) also provides incSort() and incSortBy()\nfunctions optimized to provide first entries of the result set faster than regular sort().\nThis function is expected to be used with iterators or sequence operations\nretrieving limited number of result entries.</p>\n<p>Example:</p>\n<code class="codeBlock"><span class="token operator" >></span> <span class="token keyword" >const</span> <span class="token punctuation" >{</span> <span class="token qualifier" >Seq</span> <span class="token punctuation" >}</span> <span class="token operator" >=</span> <span class="token function" >require<span class="token punctuation" >(</span></span><span class="token string" >\'immutable-sorted\'</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token operator" >></span> <span class="token keyword" >const</span> seq1<span class="token operator" >=</span><span class="token function" >Seq<span class="token punctuation" >(</span></span><span class="token punctuation" >[</span><span class="token string" >\'orange\'</span><span class="token punctuation" >,</span> <span class="token string" >\'apple\'</span><span class="token punctuation" >,</span> <span class="token string" >\'banana\'</span><span class="token punctuation" >]</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token operator" >></span> seq1<span class="token punctuation" >.</span><span class="token function" >incSort<span class="token punctuation" >(</span></span><span class="token punctuation" >)</span><span class="token punctuation" >.</span><span class="token function" >take<span class="token punctuation" >(</span></span><span class="token number" >2</span><span class="token punctuation" >)</span>\n<span class="token qualifier" >Seq</span> <span class="token punctuation" >[</span> <span class="token string" >"apple"</span><span class="token punctuation" >,</span> <span class="token string" >"banana"</span> <span class="token punctuation" >]</span></code><h2 id="license">License</h2>\n<p>MIT License</p>\n<p>Modified work Copyright (c) 2017-present, Applitopia, Inc.</p>\n<p>Original work Copyright (c) 2014-present, Facebook, Inc.</p>\n'
},{}],3:[function(n,s,a){(function(n){function s(n){function s(n,s,a,t){return!t&&c(n)&&c(s)?n.equals(s):n===s}function a(n,a,t,p){var o=s(n,a,t,p),e=o?p?"strict equal to":"does equal":p?"not strict equal to":"does not equal";return i+='\n      <span class="'+(o===t?"success":"failure")+'">\n        <code>'+(c(n)?n+"":JSON.stringify(n))+"</code>\n        "+e+"\n        <code>"+(c(a)?a+"":JSON.stringify(a))+"</code>\n      </span><br/>"}function t(n,s){return a(n,s,!0)}function p(n,s){return a(n,s,!1)}function o(n,s){return a(n,s,!0,!0)}function e(n,s){return a(n,s,!1,!0)}var c=n.isIterable||n.Iterable.isIterable,i='\n    <style>\n      * {\n        font-size: 14px;\n        font-family: monospace;\n      }\n\n      code {\n        font-family: monospace;\n        color: #4183C4;\n        text-decoration: none;\n        text-decoration: none;\n        background: rgba(65, 131, 196, 0.1);\n        border-radius: 2px;\n        padding: 2px;\n    }\n\n      .success {\n        color: rgba(84,184,54,1.0);\n      }\n\n      .success:before {\n        content: "✅";\n      }\n\n      .failure {\n        color: rgba(220,47,33,1.0);\n      }\n\n      .failure i {\n        color: rgba(210,44,31,1.0);\n      }\n\n      .failure:before {\n        content: "❌";\n      }\n    </style>';return{equal:t,notEqual:p,strictEqual:o,notStrictEqual:e}}n.runIt=function(a){function t(n){return n.replace(/require\('immutable'\)/g,"require('immutable@4.0.0-rc.9')")}if(n.RunKit){var p=document.createElement("div"),o=a.parentNode,e=o.parentNode;e.insertBefore(p,o),e.removeChild(o),o.removeChild(a);const c=JSON.parse(unescape(a.dataset.options));n.RunKit.createNotebook({element:p,nodeVersion:c.nodeVersion||"*",preamble:t("const assert = ("+s+")(require('immutable'));"+(c.preamble||"")),source:t(o.textContent.replace(/\n(>[^\n]*\n?)+$/g,"")),minHeight:"52px",onLoad:function(n){n.evaluate()}})}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],4:[function(n,s,a){function t(n,s){return(s<n?s:n)*-.55}function p(n,s){return Math.max(0,n>s?1-(n-s)/350:1)}function o(n,s){return Math.max(0,n>s?1-(n-s)/2e4:1)}function e(n,s){var a="translate3d(0, "+n+"px, 0) scale("+s+")";return{transform:a,WebkitTransform:a,MozTransform:a,msTransform:a,OTransform:a}}var c=n("react"),i=n("./SVGSet"),l=n("./Logo"),u=n("./StarBtn"),k=n("../../../package.json"),r=window.matchMedia&&window.matchMedia("(max-device-width: 680px)"),g=r&&r.matches,d=c.createClass({displayName:"Header",getInitialState:function(){return{scroll:0}},componentDidMount:function(){this.offsetHeight=this.getDOMNode().offsetHeight,window.addEventListener("scroll",this.handleScroll),window.addEventListener("resize",this.handleResize)},componentWillUnmount:function(){window.removeEventListener("scroll",this.handleScroll),window.removeEventListener("resize",this.handleResize)},handleResize:function(){this.offsetHeight=this.getDOMNode().offsetHeight},handleScroll:function(){if(!this._pending){var n=Math.min(800,Math.max(260,.7*document.documentElement.clientHeight));window.scrollY<n&&(this._pending=!0,window.requestAnimationFrame(function(){this._pending=!1,this.setState({scroll:window.scrollY})}.bind(this)))}},render:function(){var n=this.state.scroll<0,s=n?0:this.state.scroll,a=g?35:70;return c.createElement("div",{className:"header"},c.createElement("div",{className:"miniHeader"},c.createElement("div",{className:"miniHeaderContents"},c.createElement("a",{href:"./",target:"_self",className:"miniLogo"},c.createElement(i,null,c.createElement(l,{color:"#FC4349"}),c.createElement(l,{color:"#2C3E50",inline:!0}))),c.createElement("a",{href:"docs/",target:"_self"},"Docs (v",k.version,")"),c.createElement("a",{href:"https://stackoverflow.com/questions/tagged/immutable.js?sort=votes"},"Questions"),c.createElement("a",{href:"https://github.com/facebook/immutable-js/"},"GitHub"))),c.createElement("div",{className:"coverContainer"},c.createElement("div",{className:"cover"},c.createElement("div",{className:"coverFixed"},c.createElement("div",{className:"filler"},c.createElement("div",{className:"miniHeaderContents"},c.createElement("a",{href:"docs/",target:"_self"},"Docs (v",k.version,")"),c.createElement("a",{href:"https://stackoverflow.com/questions/tagged/immutable.js?sort=votes"},"Questions"),c.createElement("a",{href:"https://github.com/facebook/immutable-js/"},"GitHub"))),c.createElement("div",{className:"synopsis"},c.createElement("div",{className:"logo"},(g?[0,0,0,0,0,0,0]:[0,0,0,0,0,0,0,0,0,0,0,0]).map(function(n,u){return c.createElement(i,{key:u,style:e(t(s,u*a),o(s,u*a))},c.createElement(l,{color:"#c1c6c8"}),c.createElement(l,{color:"#6dbcdb",opacity:p(s,u*a)}))}),c.createElement(i,{style:e(s*-.55,1)},c.createElement(l,{color:"#FC4349"}),c.createElement(l,{color:"#2C3E50",inline:!0})))),c.createElement("div",{className:"buttons"},c.createElement(u,null))))))}});s.exports=d},{"../../../package.json":1,"./Logo":5,"./SVGSet":6,"./StarBtn":7,react:"react"}],5:[function(n,s,a){var t=n("react"),p=t.createClass({displayName:"Logo",shouldComponentUpdate:function(n){return n.opacity!==this.props.opacity},render:function(){var n=this.props.opacity;return void 0===n&&(n=1),this.props.inline?t.createElement("g",{fill:this.props.color,style:{opacity:this.props.opacity}},t.createElement("path",{d:"M0,0l13.9,0v41.1H0L0,0z M7.8,36.2V4.9H6.2v31.3H7.8z"}),t.createElement("path",{d:"M18.2,0L29,0l10.7,15.8L50.4,0l10.9,0v41.1H48.1V26.3l-8.4,12.3l-8.4-12.3v14.8H18.2V0z M25.9,36.2V7.9 L39.7,28L53.5,7.9v28.3h1.6V4.9h-1.6L39.7,25.2L25.9,4.9h-1.6v31.3H25.9z"}),t.createElement("path",{d:"M65.5,0l10.9,0L87,15.8L97.7,0l10.9,0v41.1H95.4V26.3L87,38.7l-8.4-12.3v14.8H65.5V0z M73.2,36.2V7.9 L87,28l13.7-20.1v28.3h1.6V4.9h-1.6L87,25.2L73.2,4.9h-1.6v31.3H73.2z"}),t.createElement("path",{d:"M128.6,42.2c-2.6,0-4.9-0.3-7-1c-2.1-0.7-3.9-1.6-5.4-3c-1.5-1.3-2.6-3-3.4-5c-0.8-2-1.2-4.4-1.2-7.1V0 l13.1,0v25.6c0,1.4,0.3,2.5,0.9,3.3c0.6,0.8,1.6,1.1,3,1.1c1.4,0,2.4-0.4,3-1.1c0.6-0.8,0.9-1.9,0.9-3.3V0l13.2,0v26.1 c0,2.7-0.4,5.1-1.2,7.1c-0.8,2-2,3.7-3.5,5c-1.5,1.3-3.3,2.3-5.4,3C133.5,41.8,131.2,42.2,128.6,42.2z M128.6,34.8 c-6.2,0-9.2-3-9.2-9.1V4.9h-1.6v20.8c0,3.5,0.9,6.1,2.8,7.9c1.9,1.8,4.6,2.7,8,2.7c3.5,0,6.2-0.9,8.1-2.7c1.9-1.8,2.8-4.5,2.8-7.9 V4.9h-1.7v20.8C137.8,31.7,134.8,34.8,128.6,34.8z"}),t.createElement("path",{d:"M155.4,10.8h-7.6V0l28.7,0v10.8h-7.6v30.3h-13.6V10.8z M163,36.2V6.4h8.8V4.9h-19.2v1.5h8.8v29.8H163z"}),t.createElement("path",{d:"M186.4,0l9.9,0l15.6,41.1h-12.9l-1.4-3.7h-12.5l-1.4,3.7h-12.9L186.4,0z M180,36.2l1.2-3.1h20.3l1.2,3.1 h1.7L192.5,4.9h-2.3l-11.9,31.3H180z M191.3,6.4l9.6,25.2h-19.2L191.3,6.4z M194.1,28.4l-2.8-7.2l-2.8,7.2H194.1z"}),t.createElement("path",{d:"M212.9,0L229,0c2.1,0,3.9,0.2,5.6,0.7c1.7,0.5,3.2,1.2,4.4,2.1s2.2,2.1,2.8,3.5c0.7,1.4,1,3,1,4.8 c0,1.3-0.2,2.4-0.5,3.4c-0.3,0.9-0.7,1.7-1,2.3c-0.5,0.7-1,1.4-1.5,1.8c0.9,0.6,1.7,1.3,2.5,2.2c0.6,0.8,1.2,1.8,1.7,3 c0.5,1.2,0.8,2.7,0.8,4.4c0,2-0.3,3.8-1,5.4c-0.7,1.6-1.7,3-3,4.1c-1.3,1.1-2.9,2-4.7,2.6c-1.9,0.6-4,0.9-6.3,0.9h-16.8V0z M228,36.2c3.6,0,6.3-0.8,8-2.3c1.7-1.6,2.6-3.6,2.6-6.2c0-1.7-0.4-3-1.1-4c-0.7-1-1.5-1.8-2.3-2.4c-1-0.7-2.2-1.1-3.4-1.4 c1-0.3,1.9-0.7,2.7-1.4c0.7-0.5,1.3-1.3,1.9-2.2s0.8-2.1,0.8-3.5c0-2.6-0.8-4.5-2.5-5.9c-1.6-1.3-3.9-2-6.7-2h-8.9v31.3H228z M220.7,19.1V6.4l7.3,0c2.7,0,4.6,0.6,5.8,1.8c1.2,1.2,1.8,2.7,1.8,4.6c0,1.9-0.6,3.4-1.8,4.6c-1.2,1.2-3.1,1.8-5.8,1.8H220.7z M220.7,34.7V20.6h7.2c1.3,0,2.5,0.1,3.5,0.4c1.1,0.3,2,0.7,2.9,1.2c0.8,0.6,1.5,1.3,1.9,2.2c0.5,0.9,0.7,2,0.7,3.2 c0,2.5-0.8,4.3-2.5,5.4c-1.7,1.1-3.9,1.7-6.6,1.7H220.7z M230.2,12.5c0-1.9-1-2.8-3.1-2.8h-1.5v5.7h1.5 C229.2,15.4,230.2,14.4,230.2,12.5z M227.1,31.4c3.1,0,4.7-1.2,4.7-3.6c0-2.4-1.6-3.6-4.7-3.6h-1.5v7.2H227.1z"}),t.createElement("path",{d:"M248.3,0L262,0v30.3h11.3v10.8h-25V0z M269.9,36.2v-1.5h-13.8V4.9h-1.6v31.3H269.9z"}),t.createElement("path",{d:"M275.3,0l24.2,0v10.8h-11.1v4.6h10.9v10.2h-10.9v4.7H300v10.8h-24.7V0z M295.4,36.2v-1.5h-12.3V21.2h11.7 v-1.5h-11.7V6.4h12.3V4.9h-13.9v31.3H295.4z"})):t.createElement("g",{fill:this.props.color,style:{opacity:this.props.opacity}},t.createElement("path",{d:"M0,0l13.9,0v41.1H0L0,0z"}),t.createElement("path",{d:"M18.2,0L29,0l10.7,15.8L50.4,0l10.9,0v41.1H48.1V26.3l-8.4,12.3l-8.4-12.3v14.8H18.2V0z"}),t.createElement("path",{d:"M65.5,0l10.9,0L87,15.8L97.7,0l10.9,0v41.1H95.4V26.3L87,38.7l-8.4-12.3v14.8H65.5V0z"}),t.createElement("path",{d:"M128.6,42.2c-2.6,0-4.9-0.3-7-1c-2.1-0.7-3.9-1.6-5.4-3c-1.5-1.3-2.6-3-3.4-5c-0.8-2-1.2-4.4-1.2-7.1V0 l13.1,0v25.6c0,1.4,0.3,2.5,0.9,3.3c0.6,0.8,1.6,1.1,3,1.1c1.4,0,2.4-0.4,3-1.1c0.6-0.8,0.9-1.9,0.9-3.3V0l13.2,0v26.1 c0,2.7-0.4,5.1-1.2,7.1c-0.8,2-2,3.7-3.5,5c-1.5,1.3-3.3,2.3-5.4,3C133.5,41.8,131.2,42.2,128.6,42.2z"}),t.createElement("path",{d:"M155.4,10.8h-7.6V0l28.7,0v10.8h-7.6v30.3h-13.6V10.8z"}),t.createElement("path",{d:"M186.4,0l9.9,0l15.6,41.1h-12.9l-1.4-3.7h-12.5l-1.4,3.7h-12.9L186.4,0z M194.1,28.4l-2.8-7.2l-2.8,7.2 H194.1z"}),t.createElement("path",{d:"M212.9,0L229,0c2.1,0,3.9,0.2,5.6,0.7c1.7,0.5,3.2,1.2,4.4,2.1s2.2,2.1,2.8,3.5c0.7,1.4,1,3,1,4.8 c0,1.3-0.2,2.4-0.5,3.4c-0.3,0.9-0.7,1.7-1,2.3c-0.5,0.7-1,1.4-1.5,1.8c0.9,0.6,1.7,1.3,2.5,2.2c0.6,0.8,1.2,1.8,1.7,3 c0.5,1.2,0.8,2.7,0.8,4.4c0,2-0.3,3.8-1,5.4c-0.7,1.6-1.7,3-3,4.1c-1.3,1.1-2.9,2-4.7,2.6c-1.9,0.6-4,0.9-6.3,0.9h-16.8V0z M230.2,12.5c0-1.9-1-2.8-3.1-2.8h-1.5v5.7h1.5C229.2,15.4,230.2,14.4,230.2,12.5z M227.1,31.4c3.1,0,4.7-1.2,4.7-3.6 c0-2.4-1.6-3.6-4.7-3.6h-1.5v7.2H227.1z"}),t.createElement("path",{d:"M248.3,0L262,0v30.3h11.3v10.8h-25V0z"}),t.createElement("path",{d:"M275.3,0l24.2,0v10.8h-11.1v4.6h10.9v10.2h-10.9v4.7H300v10.8h-24.7V0z"}))}});s.exports=p},{react:"react"}],6:[function(n,s,a){var t=n("react"),p=t.createClass({displayName:"SVGSet",render:function(){return t.createElement("svg",{className:"svg",style:this.props.style,viewBox:"0 0 300 42.2"},this.props.children)}});s.exports=p},{react:"react"}],7:[function(n,s,a){var t=n("react"),p=n("./loadJSON"),o=t.createClass({displayName:"StarBtn",getInitialState:function(){return{stars:null}},componentDidMount:function(){p("https://api.github.com/repos/facebook/immutable-js",function(n){n&&n.stargazers_count&&this.setState({stars:n.stargazers_count})}.bind(this))},render:function(){return t.createElement("span",{className:"github-btn"},t.createElement("a",{className:"gh-btn",id:"gh-btn",href:"https://github.com/facebook/immutable-js/"},t.createElement("span",{className:"gh-ico"}),t.createElement("span",{className:"gh-text"},"Star")),this.state.stars&&t.createElement("span",{className:"gh-triangle"}),this.state.stars&&t.createElement("a",{className:"gh-count",href:"https://github.com/facebook/immutable-js/stargazers"},this.state.stars))}});s.exports=o},{"./loadJSON":8,react:"react"}],"/home/chaser/workspace/immutable-sorted/pages/src/src/index.js":[function(n,s,a){var t=n("react"),p=n("./Header"),o=n("../../generated/readme.json");n("../../lib/runkit-embed");var e=t.createClass({displayName:"Index",render:function(){return t.createElement("div",null,t.createElement(p,null),t.createElement("div",{className:"pageBody",id:"body"},t.createElement("div",{className:"contents"},t.createElement("div",{dangerouslySetInnerHTML:{__html:o}}))))}});s.exports=e},{"../../generated/readme.json":2,"../../lib/runkit-embed":3,"./Header":4,react:"react"}],8:[function(n,s,a){function t(n,s){var a=new XMLHttpRequest;a.onload=function(n){var a;try{a=JSON.parse(n.target.responseText)}catch(n){}s(a)},a.open("get",n,!0),a.send()}s.exports=t},{}],immutable:[function(n,s,a){(function(n){s.exports=n.Immutable}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],react:[function(n,s,a){(function(n){s.exports=n.React}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},["/home/chaser/workspace/immutable-sorted/pages/src/src/index.js"]);
//# sourceMappingURL=maps/bundle.js.map
